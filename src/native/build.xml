<!--
 Jitsi, the OpenSource Java VoIP and Instant Messaging client.

 Distributable under LGPL license.
 See terms of license at gnu.org.

 Portions (c) Microsoft Corporation. All rights reserved.
-->
<project name="jitsi-native" default="help-native" xmlns:ivy="antlib:org.apache.ivy.ant" >
  <import file="../../build.xml"/>
  <property name="project.basedir" value="${sc.basedir}/.." /> <!-- Already set in jitsi/build.xml -->

  <!-- additional property -->
  <property name="obj" value="${src}/native/native_obj" />

  <include file="${project.basedir}/buildtools.xml" />

  <condition property="arch" value="32">
    <or>
      <os arch="x86" />
      <os arch="i386" />
      <os arch="i486" />
      <os arch="i586" />
      <os arch="i686" />
    </or>
  </condition>
  <condition property="arch" value="64">
    <or>
      <os arch="amd64" />
      <os arch="x86_64" />
    </or>
  </condition>

  <!--
    Cross compilation. It is mainly used on Linux to cross-compile 32-bit
    binaries on a 64-bit host.
  -->
  <condition property="cross_32" value="y" >
    <equals arg1="${arch}" arg2="32" />
  </condition>

  <condition property="cross_64" value="y" >
    <equals arg1="${arch}" arg2="64" />
  </condition>

  <!-- Mac OS X only -->
  <condition property="cross_ppc" value="y" >
    <equals arg1="${arch}" arg2="ppc" />
  </condition>

  <!-- initialize destination directory -->
  <condition property="native_install_dir" value="${native.libs}/windows-64">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="32" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/windows-64">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="64" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/linux">
    <and>
      <isset property="is.running.linux"/>
      <equals arg1="${arch}" arg2="32" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/linux-64">
    <and>
      <isset property="is.running.linux"/>
      <equals arg1="${arch}" arg2="64" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/mac">
    <isset property="is.running.macos"/>
  </condition>

  <condition property="is.release">
    <not>
      <isset property="debug" />
    </not>
  </condition>

  <condition property="debug.flag" value="-O2">
    <not>
      <isset property="debug" />
    </not>
  </condition>

  <condition property="debug.flag" value="-g">
    <isset property="debug" />
  </condition>

  <!--
  <echo message="Install directory ${native_install_dir}" />
  <echo message="os: ${os.arch} ${os.name} ${os.version}" />
  <echo message="arch: ${arch}" />
  -->

  <target name="init-native" depends="buildtools.init-cpptasks" description="Initialize native stuff" >
    <mkdir dir="${obj}" />
  </target>

  <!-- compile LocalhostRetriever library -->
  <target name="localhostretriever" description="Build LocalhostRetriever 64 bit shared library" if="is.running.windows"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/LocalhostRetriever" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="${debug.flag}" />
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-m64" if="is.running.windows" />

      <linkerarg value="-m64" if="is.running.windows" />
      <linkerarg value="-liphlpapi" location="end" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
      <linkerarg value="-oLocalhostRetriever.dll" />

      <fileset dir="${src}/native/windows/LocalhostRetriever" includes="*.c"/>
    </cc>
  </target>

  <!-- compile AEGetURLEventHandler library for Mac OS X (32-bit/64-bit/ppc) -->
  <target name="aegeturleventhandler" description="Build AEGetURLEventHandler shared library for Mac OS X" if="is.running.macos"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/AEGetURLEventHandler" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-arch" />
      <compilerarg value="x86_64" />
      <compilerarg value="-arch" />
      <compilerarg value="i386" />
      <compilerarg value="-arch" />
      <compilerarg value="ppc" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" />

      <linkerarg value="-o" location="end" />
      <linkerarg value="libAEGetURLEventHandlerAgent.jnilib" location="end" />
      <linkerarg value="-arch" />
      <linkerarg value="x86_64" />
      <linkerarg value="-arch" />
      <linkerarg value="i386" />
      <linkerarg value="-arch" />
      <linkerarg value="ppc" />
      <linkerarg value="-framework" />
      <linkerarg value="Foundation" />

      <fileset dir="${src}/native/macosx/launcharghandler" includes="*.m"/>
    </cc>
  </target>

  <!-- compile sparkle library for Mac OS X (32-bit/64-bit/ppc)
  make sure you do export MACOSX_DEPLOYMENT_TARGET=10.5
  and also:
  install_name_tool -change "@loader_path/../Frameworks/Sparkle.framework/Versions/B/Sparkle" "@executable_path/../Frameworks/Sparkle.framework/Versions/B/Sparkle" libsparkle_init.dylib
  -->
  <target name="sparkle" description="Build sparkle shared library for Mac OS X" if="is.running.macos"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/sparkle_init" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch" />
      <compilerarg value="x86_64" />
      <compilerarg value="-arch" />
      <compilerarg value="i386" />
      <compilerarg value="-arch" />
      <compilerarg value="ppc" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" />
      <compilerarg value="-I/System/Library/Frameworks/Sparkle.framework/Versions/B/Headers/" />

      <linkerarg value="-arch" />
      <linkerarg value="x86_64" />
      <linkerarg value="-arch" />
      <linkerarg value="i386" />
      <linkerarg value="-arch" />
      <linkerarg value="ppc" />
      <linkerarg value="-framework" />
      <linkerarg value="AppKit" />
      <linkerarg value="-framework" />
      <linkerarg value="Foundation" />
      <linkerarg value="-framework" />
      <linkerarg value="Sparkle" />

      <fileset dir="${src}/native/macosx/sparkle" includes="*.m"/>
    </cc>
  </target>

  <target name="sysactivity" description="Build sysactivity" depends="init-native">

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/sysactivitynotifications" objdir="${obj}">
        <!-- Common compiler flags -->
        <compilerarg value="-D_JNI_IMPLEMENTATION_" />
        <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
        <compilerarg value="-O2" />
        <compilerarg value="-Wall" />
        <compilerarg value="-Wextra" />

        <!-- Common linker flags -->
        <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

        <!-- Mac OS X-specific flags -->
        <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="x86_64" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="i386" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="ppc" if="is.running.macos"/>
        <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers"
                   if="is.running.macos"/>

        <linkerarg value="-o" location="end" if="is.running.macos"/>
        <linkerarg value="libsysactivitynotifications.jnilib" location="end"
                   if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="x86_64" if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="i386" if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="ppc" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="AppKit" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Carbon" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="SystemConfiguration" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos" />
        <linkerarg value="IOKit" if="is.running.macos" />

        <fileset dir="${src}/native/sysactivity" includes="*.m" if="is.running.macos"/>

        <!-- Windows-specific flags -->
        <compilerarg value="-D_WIN32_WINNT=0x0502" if="is.running.windows" />
        <compilerarg value="-DWINVER=0x0502" if="is.running.windows" />
        <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
        <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />
        <compilerarg value="-m64" if="is.running.windows" />

        <linkerarg value="-m64" if="is.running.windows" />
        <linkerarg value="-osysactivitynotifications.dll" if="is.running.windows" />
        <linkerarg value="-liphlpapi" location="end" if="is.running.windows" />
        <linkerarg value="-luser32" location="end" if="is.running.windows" />
        <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

        <fileset dir="${src}/native/sysactivity" includes="*.cpp" if="is.running.windows" />
    </cc>
  </target>

  <target name="globalshortcut" description="Build globalshortcut" depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/globalshortcut" objdir="${obj}">
        <!-- common compiler flags -->
        <compilerarg value="-D_JNI_IMPLEMENTATION_" />
        <compilerarg value="-Wall" />
        <compilerarg value="-Wextra" />
        <compilerarg value="-Wno-unused-parameter" />

        <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
        <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

        <!-- Mac OS X specific flags -->
        <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
        <compilerarg value="-O2" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="x86_64" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="i386" if="is.running.macos"/>
        <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers"
                   if="is.running.macos"/>

        <linkerarg value="-o" location="end" if="is.running.macos"/>
        <linkerarg value="libglobalshortcut.jnilib" location="end"
                   if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="x86_64" if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="i386" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Foundation" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Carbon" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Cocoa" if="is.running.macos"/>

        <fileset dir="${src}/native/globalshortcut" includes="*.m" if="is.running.macos"/>

        <!-- Linux specific flags -->
        <fileset dir="${src}/native/globalshortcut" includes="*.cc" if="is.running.linux" />

        <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
        <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

        <linkerarg value="-lX11" if="is.running.linux" />
        <linkerarg value="-lstdc++" if="is.running.linux" />
        <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>

        <!-- Windows specific flags -->
        <fileset dir="${src}/native/globalshortcut" includes="*.cpp" if="is.running.windows" />

        <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
        <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />
        <compilerarg value="-m64" if="is.running.windows" />

        <linkerarg value="-m64" if="is.running.windows" />
        <linkerarg value="-liphlpapi" location="end" if="is.running.windows" />
        <linkerarg value="-static-libgcc" />
        <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
        <linkerarg value="-lstdc++" location="end" if="is.running.windows" />
        <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
        <linkerarg value="-oglobalshortcut.dll" if="is.running.windows" />
    </cc>
  </target>

  <!-- Cleanup object files and shared libraries -->
  <target name="clean-native" description="Clean all object file and libraries.">
    <delete failonerror="false" includeemptydirs="true">
        <fileset dir="${obj}" />
        <fileset dir="${src}/native/" includes="*.dll *.so *.dyld *.jnilib *.manifest *.o *.obj *.lib *.exp history.xml" />
        <fileset dir="${sc.basedir}" includes="**.dll *.so *.dyld *.jnilib *.manifest *.o *.obj *.lib *.exp history.xml" />
    </delete>
  </target>

  <!-- Build all object files and shared libraries -->
  <target name="build-native" description="Build all object files and libraries."
          depends="globalshortcut, sysactivity, localhostretriever, msoutlookaddrbook64, msoutlookaddrbookcomserver64,
          aegeturleventhandler, sparkle">
      <echo message="All object files and libraries have been built." />
  </target>

  <!-- Help, print useful targets -->
  <target name="help-native">
    <echo message="Targets available:" />
    <echo message="'ant clean-native' to clean all object files and libraries." />
    <echo message="'ant build-native' to build all object files and libraries." />
    <echo message="" />
    <echo message="'ant globalshortcut' to compile globalshortcut shared library" />
    <echo message="'ant localhostretriever' (Windows only) to compile LocalhostRetriever shared library" />
    <echo message="'ant aegeturleventhandler' (Mac OS X only) to compile AEGetURLEventHandler shared library" />
    <echo message="'ant sparkle' (Mac OS X only) to compile sparkle shared library" />
    <echo message="'ant msoutlookaddrbook64' (Windows only) to compile the 64 bit jmsoutlookaddrbook shared library and the jmsoutlookaddrbook 64 bit COM server" />
    <echo message="'ant msoutlookaddrbookcomserver32' (Windows only) to compile Accession Outlook Server for Windows 32 bit" />
    <echo message="'ant msoutlookaddrbookcomserver64' (Windows only) to compile Accession Outlook Server for Windows 64 bit" />
    <echo message="'ant sysactivity' to compile the sysactivitynotifications shared library" />
    <echo message="" />
    <echo message="Options:" />
    <echo message="-Darch: cross-compile for 32-bit (-Darch=32), 64-bit (-Darch=64) or ppc (-Darch=ppc, Mac OS X only) targets. Windows users have to use gcc >= 4.5." />
    <echo message="" />
  </target>

  <!-- compile jmsoutlookaddrbook library for Windows -->
  <target
      name="msoutlookaddrbook64"
      description="Build jmsoutlookaddrbook shared library for Windows"
      if="is.running.windows"
      depends="init-native,msoutlookaddrbookcomserver64" >

    <echo message="obj is ${obj}, native_install_dir is ${native_install_dir}, java home is ${system.JAVA_HOME}, src is ${src}"/>
    <cc
        name="gcc"
        objdir="${obj}"
        outfile="${native_install_dir}/jmsoutlookaddrbook"
        outtype="shared">
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-D_WIN32_WINNT=0x0502" />
      <compilerarg value="-DWINVER=0x0502" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-m64"/>
      <compilerarg value="-O2" />
      <compilerarg value="-Wall" />

      <linkerarg value="-ojmsoutlookaddrbook.dll" />
      <linkerarg value="-m64"/>
      <linkerarg value="-Wl,--kill-at" />
      <linkerarg value="-Wl,--subsystem,windows" />
      <linkerarg value="-static-libgcc" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <libset libs="advapi32, uuid, ole32, oleaut32, msi, stdc++" />

      <fileset dir="${src}/native/addressbook" includes="*.c" />
      <fileset dir="${src}/native/addressbook" includes="*.cxx" />
      <fileset dir="${src}/native/addressbook/client" includes="*.cxx" />
    </cc>
    <antcall target="stripbinary">
      <param name="executable" value="${native_install_dir}/jmsoutlookaddrbook.dll" />
    </antcall>
  </target>

  <!-- Set the product name for the native builds for Windows -->
  <target
      name="productName"
      description="Set the product name"
      if="is.running.windows"
      depends="init-native">

    <property name="productName" value="MaXUC"/>
  </target>

  <!-- Download native dependencies required to build DLL or EXE (currently only AOS EXE files)
  To upgrade dependencies, upload new versions to Artifactory and update version numbers in ivy.xml.
  -->
  <target name="resolve-native-dependencies" description="Get native dependencies." unless="${offlineBuild}" depends="buildtools.init-ivy">
    <ivy:settings file="${ext}/ivysettings.xml" />
    <ivy:resolve file="${ext}/jitsi/ivy.xml" transitive="true" />
    <ivy:retrieve conf="jitsisrcnative" pattern="${ext}/[filelocation]/[artifact].[ext]" overwriteMode="different" />
  </target>

  <!-- Build AOS: AccessionOutlookServer32.exe
  Built EXE file must be uploaded to Artifactory under the bumped version.
  Then the version number for "AccessionOutlookServer32" dependency must be updated in ivy.xml.
  -->
  <target
      name="msoutlookaddrbookcomserver32"
      description="Build OutlookServer 32 bit executable for Windows"
      if="is.running.windows">
    <antcall target="msoutlookaddrbookcomserverX">
      <param name="bitness" value="32" />
      <param name="restarget" value="pe-i386" />
    </antcall>
  </target>

  <!-- Build AOS: AccessionOutlookServer64.exe
  Built EXE file must be uploaded to Artifactory under the bumped version.
  Then the version number for "AccessionOutlookServer64" dependency must be updated in ivy.xml.
  -->
  <target
      name="msoutlookaddrbookcomserver64"
      description="Build OutlookServer 64 bit executable for Windows"
      if="is.running.windows">
    <antcall target="msoutlookaddrbookcomserverX">
      <param name="bitness" value="64" />
      <param name="restarget" value="pe-x86-64" />
    </antcall>
  </target>

  <!-- Build AOS: either AccessionOutlookServer32.exe or AccessionOutlookServer64.exe -->
  <target
      name="msoutlookaddrbookcomserverX"
      description="Build OutlookServer X bit executable for Windows"
      if="is.running.windows"
      depends="init-native,productName,resolve-native-dependencies">

      <echo file="${src}/native/addressbook/ProductName.h" append="false">// Created automatically by the build process

#define PRODUCT_NAME "${productName}"
    </echo>

    <!--
    <exec executable="echo">
      <arg value='#define PRODUCT_NAME \"${productName}\" '/>
      <redirector output="${src}/native/addressbook/ProductName.h" append="true" />
    </exec>
    -->

    <echo message="Resources at ${src}/native/addressbook/server/Resources${bitness}.rc, output file is ${native_install_dir}/${productName}OutlookServer${bitness}"/>

    <exec executable="windres">
      <arg value="--target=${restarget}" />
      <arg value="${src}/native/addressbook/server/Resources${bitness}.rc" />
      <arg value="${obj}/Resources.o"/>
    </exec>
    <cc
        name="g++"
        objdir="${obj}"
        outfile="${native_install_dir}/${productName}OutlookServer${bitness}">
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-I${src}/native/addressbook/breakpad" />
      <compilerarg value="-I${src}/native/windows/include" />
      <compilerarg value="-m${bitness}" />
      <compilerarg value="${debug.flag}" />
      <compilerarg value="-Wall" />
      <compilerarg value="-Wno-unknown-pragmas" />
      <compilerarg value="-DCURL_STATICLIB" />

      <linkerarg value="-o${productName}OutlookServer${bitness}.exe" />
      <linkerarg value="-m${bitness}" />
      <linkerarg value="${obj}/Resources.o" location="mid" />
      <linkerarg value="-L${src}/native/windows/lib${bitness}" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <libset libs="pthread, uuid, ole32, oleaut32, msi, stdc++, curl, jansson, ws2_32, bcrypt" />

      <fileset dir="${src}/native/addressbook" includes="*.cxx" />
      <fileset dir="${src}/native/addressbook/server" includes="*.cxx" />
      <fileset dir="${src}/native/addressbook/breakpad">
        <include name="client/windows/handler/exception_handler.cc" />
        <include name="client/windows/crash_generation/crash_generation_client.cc" />
        <include name="common/windows/guid_string.cc" />
      </fileset>
    </cc>

    <antcall target="stripbinary">
      <param name="executable" value="${native_install_dir}/${productName}OutlookServer${bitness}.exe" />
    </antcall>
  </target>

  <target name="stripbinary" if="is.release">
    <echo message="Stripping ${executable}" />
    <exec executable="strip">
      <arg value="-x"/>
      <arg value="${executable}"/>
    </exec>
  </target>
</project>
