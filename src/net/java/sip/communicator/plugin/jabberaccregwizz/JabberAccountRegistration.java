/*
 * Jitsi, the OpenSource Java VoIP and Instant Messaging client.
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */
// Portions (c) Microsoft Corporation. All rights reserved.
package net.java.sip.communicator.plugin.jabberaccregwizz;

import net.java.sip.communicator.service.protocol.*;
import net.java.sip.communicator.util.wizard.*;

/**
 * The <tt>JabberAccountRegistration</tt> is used to store all user input data
 * through the <tt>JabberAccountRegistrationWizard</tt>.
 *
 * @author Yana Stamcheva
 * @author Boris Grozev
 */
public class JabberAccountRegistration
    extends SecurityAccountRegistration
{
    /**
     * The default value of server port for jabber accounts.
     */
    public static final String DEFAULT_PORT = "5222";

    /**
     * The default value of the priority property.
     */
    public static final String DEFAULT_PRIORITY = "30";

    /**
     * The default value of the resource property.
     */
    public static final String DEFAULT_RESOURCE = "jitsi";

    /**
     * Default value for resource auto generating.
     */
    public static final boolean DEFAULT_RESOURCE_AUTOGEN = true;

    /**
     * The default value for DTMF method.
     */
    private String defaultDTMFMethod = "AUTO_DTMF";

    /**
     * The default value of minimale DTMF tone duration.
     */
    public static String DEFAULT_MINIMAL_DTMF_TONE_DURATION = Integer.toString(
            OperationSetDTMF.DEFAULT_DTMF_MINIMAL_TONE_DURATION);

    /**
     * The user identifier.
     */
    private String userID;

    /**
     * The password.
     */
    private String password;

    /**
     * Indicates if the password should be remembered.
     */
    private boolean rememberPassword = true;

    /**
     * The server address.
     */
    private String serverAddress;

    /**
     * The default domain.
     */
    private String defaultUserSuffix;

    /**
     * The port.
     */
    private int port = new Integer(DEFAULT_PORT);

    /**
     * The resource property, initialized to the default resource.
     */
    private String resource = DEFAULT_RESOURCE;

    /**
     * The priority property.
     */
    private int priority = new Integer(DEFAULT_PRIORITY);

    /**
     * Indicates if keep alive packets should be send.
     */
    private boolean sendKeepAlive = true;

    /**
     * Indicates if the server is overriden.
     */
    private boolean isServerOverridden = false;

    /**
     * Is resource auto generate enabled.
     */
    private boolean resourceAutogenerated = DEFAULT_RESOURCE_AUTOGEN;

    /**
     * The account display name.
     */
    private String accountDisplayName;

    /**
     * The sms default server.
     */
    private String smsServerAddress;

    /**
     * DTMF method.
     */
    private String dtmfMethod = null;

    /**
     * The minimal DTMF tone duration set.
     */
    private String dtmfMinimalToneDuration = DEFAULT_MINIMAL_DTMF_TONE_DURATION;

    /**
     * The client TLS certificate ID.
     */
    private String clientCertificateId = null;

    /**
     * Initializes a new JabberAccountRegistration.
     */
    public JabberAccountRegistration()
    {
        super();
    }

    /**
     * Returns the password of the jabber registration account.
     * @return the password of the jabber registration account.
     */
    public String getPassword()
    {
        return password;
    }

    /**
     * Sets the password of the jabber registration account.
     * @param password the password of the jabber registration account.
     */
    public void setPassword(String password)
    {
        this.password = password;
    }

    /**
     * Returns TRUE if password has to remembered, FALSE otherwise.
     * @return TRUE if password has to remembered, FALSE otherwise
     */
    public boolean isRememberPassword()
    {
        return rememberPassword;
    }

    /**
     * Sets the rememberPassword value of this jabber account registration.
     * @param rememberPassword TRUE if password has to remembered, FALSE
     * otherwise
     */
    public void setRememberPassword(boolean rememberPassword)
    {
        this.rememberPassword = rememberPassword;
    }

    /**
     * Returns the User ID of the jabber registration account.
     * @return the User ID of the jabber registration account.
     */
    public String getUserID()
    {
        return userID;
    }

    /**
     * Returns the user suffix.
     *
     * @return the user suffix
     */
    public String getDefaultUserSuffix()
    {
        return defaultUserSuffix;
    }

    /**
     * The address of the server we will use for this account
     * @return String
     */
    public String getServerAddress()
    {
        return serverAddress;
    }

    /**
     * The port on the specified server
     * @return the server port
     */
    public int getPort()
    {
        return port;
    }

    /**
     * Determines whether sending of keep alive packets is enabled.
     *
     * @return <tt>true</tt> if keep alive packets are to be sent for this
     * account and <tt>false</tt> otherwise.
     */
    public boolean isSendKeepAlive()
    {
        return sendKeepAlive;
    }

    /**
     * Sets the User ID of the jabber registration account.
     *
     * @param userID the identifier of the jabber registration account.
     */
    public void setUserID(String userID)
    {
        this.userID = userID;
    }

    /**
     * Sets the default value of the user sufix.
     *
     * @param userSufix the user name sufix (the domain name after the @ sign)
     */
    public void setDefaultUserSufix(String userSufix)
    {
        this.defaultUserSuffix = userSufix;
    }

    /**
     * Sets the server
     *
     * @param serverAddress the IP address or FQDN of the server.
     */
    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    /**
     * Indicates if the server address has been overridden.
     *
     * @return <tt>true</tt> if the server address has been overridden,
     * <tt>false</tt> - otherwise.
     */
    public boolean isServerOverridden()
    {
        return isServerOverridden;
    }

    /**
     * Sets <tt>isServerOverridden</tt> property.
     * @param isServerOverridden indicates if the server is overridden
     */
    public void setServerOverridden(boolean isServerOverridden)
    {
        this.isServerOverridden = isServerOverridden;
    }

    /**
     * Sets the server port number.
     *
     * @param port the server port number
     */
    public void setPort(int port)
    {
        this.port = port;
    }

    /**
     * Specifies whether SIP Communicator should send send keep alive packets
     * to keep this account registered.
     *
     * @param sendKeepAlive <tt>true</tt> if we are to send keep alive packets
     * and <tt>false</tt> otherwise.
     */
    public void setSendKeepAlive(boolean sendKeepAlive)
    {
        this.sendKeepAlive = sendKeepAlive;
    }

    /**
     * Returns the resource.
     * @return the resource
     */
    public String getResource()
    {
        return resource;
    }

    /**
     * Sets the resource.
     * @param resource the resource for the jabber account
     */
    public void setResource(String resource)
    {
        this.resource = resource;
    }

    /**
     * Returns the priority property.
     * @return priority
     */
    public int getPriority()
    {
        return priority;
    }

    /**
     * Sets the priority property.
     * @param priority the priority to set
     */
    public void setPriority(int priority)
    {
        this.priority = priority;
    }

    /**
     * Is resource auto generate enabled.
     *
     * @return true if resource is auto generated
     */
    public boolean isResourceAutogenerated()
    {
        return resourceAutogenerated;
    }

    /**
     * Set whether resource autogenerate is enabled.
     * @param resourceAutogenerated
     */
    public void setResourceAutogenerated(boolean resourceAutogenerated)
    {
        this.resourceAutogenerated = resourceAutogenerated;
    }

    /**
     * Returns the account display name.
     *
     * @return the account display name
     */
    public String getAccountDisplayName()
    {
        return accountDisplayName;
    }

    /**
     * Sets the account display name.
     *
     * @param accountDisplayName the account display name
     */
    public void setAccountDisplayName(String accountDisplayName)
    {
        this.accountDisplayName = accountDisplayName;
    }

    /**
     * Returns the default sms server.
     *
     * @return the account default sms server
     */
    public String getSmsServerAddress()
    {
        return smsServerAddress;
    }

    /**
     * Sets the default sms server.
     *
     * @param serverAddress the sms server to set as default
     */
    public void setSmsServerAddress(String serverAddress)
    {
        this.smsServerAddress = serverAddress;
    }

    /**
     * Returns the DTMF method.
     *
     * @return the DTMF method.
     */
    public String getDTMFMethod()
    {
        return dtmfMethod;
    }

    /**
     * Sets the DTMF method.
     *
     * @param dtmfMethod the DTMF method to set
     */
    public void setDTMFMethod(String dtmfMethod)
    {
        this.dtmfMethod = dtmfMethod;
    }

    /**
     * @return the defaultDTMFMethod
     */
    public String getDefaultDTMFMethod()
    {
        return defaultDTMFMethod;
    }

    /**
     * @param defaultDTMFMethod the defaultDTMFMethod to set
     */
    public void setDefaultDTMFMethod(String defaultDTMFMethod)
    {
        this.defaultDTMFMethod = defaultDTMFMethod;
    }

    /**
     * Returns the minimal DTMF tone duration.
     *
     * @return The minimal DTMF tone duration.
     */
    public String getDtmfMinimalToneDuration()
    {
        return dtmfMinimalToneDuration;
    }

    /**
     * Sets the minimal DTMF tone duration.
     *
     * @param dtmfMinimalToneDuration The minimal DTMF tone duration to set.
     */
    public void setDtmfMinimalToneDuration(String dtmfMinimalToneDuration)
    {
        this.dtmfMinimalToneDuration = dtmfMinimalToneDuration;
    }

    /**
     * Sets the method used for RTP/SAVP indication.
     */
    public void setSavpOption(int savpOption)
    {
        // SAVP option is not useful for XMPP account.
        // Thereby, do nothing.
    }

    /**
     * Sets the client certificate configuration entry ID.
     * @param clientCertificateId the client certificate configuration entry ID.
     */
    public void setClientCertificateId(String clientCertificateId)
    {
        this.clientCertificateId = clientCertificateId;
    }

    /**
     * Gets the client certificate configuration entry ID.
     * @returns the client certificate configuration entry ID.
     */
    public String getClientCertificateId()
    {
        return clientCertificateId;
    }
}
